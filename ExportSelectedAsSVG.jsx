/**    Saves selected objecs as SVG*/var doc = app.activeDocument;var selected = doc.selection;if (selected.length === 0) {    alert ("There are no selected objects", "Script Error", true);} else {    exportSelected(selected);}function exportSelected(selected) {    var i,        l,        currentObj,        newDoc,        group,        dimentions = getDimentions(selected),        fileObj;    app.copy();    newDoc = app.documents.add(DocumentColorSpace.RGB, Math.ceil(dimentions.width), Math.ceil(dimentions.height));        app.paste();    alignObjects(newDoc);         fileObj = File.saveDialog ("Input name of file");    newDoc.exportFile(fileObj, ExportType.SVG, getOptions());    newDoc.close(SaveOptions.SAVECHANGES);    newDoc = null;}function alignObjects(doc) {    group = doc.groupItems.add();    for (i = 0, l = doc.selection.length; i < l; i++) {        doc.selection[i].move(group, ElementPlacement.INSIDE);    }    group.left = 0;    group.top = doc.height;}function getDimentions(selected) {    var minX,         maxX,         minY,         maxY,        currentObjBox;    for (i=0, l=selected.length; i < l; i++) {        currentObjBox = selected[i].controlBounds;                if (i === 0) {            minX = currentObjBox[0];            minY = currentObjBox[3];            maxX = currentObjBox[2];            maxY = currentObjBox[1];        } else {            minX = Math.min(minX, currentObjBox[0]);            minY = Math.min(minY, currentObjBox[3]);            maxX = Math.max(maxX, currentObjBox[2]);            maxY = Math.max(maxY, currentObjBox[1]);        }    }        return {        width: maxX - minX,        height: maxY - minY    }}function getOptions() {	var options = new ExportOptionsSVG();		return options;}